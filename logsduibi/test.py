import re
import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

sns.set_style("whitegrid")

def parse_log_file(log_path):
    """
    从日志文件中解析出训练和测试数据
    """
    train_data = []
    test_data = []

    current_epoch = 0
    with open(log_path, 'r', encoding='utf-8', errors='ignore') as f:
        lines = f.readlines()

    for line in lines:
        # --- 匹配训练日志 ---
        train_match = re.search(
            r"Train:.*?\[(\d+\.\d+)/\d+\.\d+\].*?\[(\d+\.\d+)/(\d+\.\d+)\].*?"
            r"\[lr ([\d\.e\-]+)\].*?\[CE ([\d\.]+) \(([\d\.]+)\)\]",
            line
        )
        if train_match:
            batch_progress = float(train_match.group(1))
            total_batches = float(train_match.group(2))
            epoch_progress = float(train_match.group(3))  # 当前epoch进度
            lr = float(train_match.group(4))
            ce_loss = float(train_match.group(5))
            ce_avg = float(train_match.group(6))

            # 计算当前 epoch（根据日志格式，可以使用 epoch_progress）
            epoch = epoch_progress
            current_epoch = epoch

            train_data.append({
                'epoch': epoch,
                'lr': lr,
                'ce_loss': ce_loss,
                'ce_avg': ce_avg
            })

        # --- 匹配测试日志 ---
        test_match = re.search(r"net: ([\d\.]+) \(([\d\.]+)\)", line)
        if test_match:
            top1 = float(test_match.group(1))
            top5 = float(test_match.group(2))
            test_data.append({
                'epoch': current_epoch,
                'top1': top1,
                'top5': top5
            })

    return pd.DataFrame(train_data), pd.DataFrame(test_data)

def parse_logs_in_dir(log_dir):
    """
    解析指定目录下的所有日志文件
    """
    logs = {}
    for fname in os.listdir(log_dir):
        if fname.endswith('.txt') or 'log' in fname.lower():
            path = os.path.join(log_dir, fname)
            print(f"Parsing {path}...")
            train_df, test_df = parse_log_file(path)
            logs[fname] = {'train': train_df, 'test': test_df}
    return logs

def plot_comparison(logs, metric='top1', title=None):
    """
    对比多个日志的某个指标
    """
    if title is None:
        title = f'{metric.title()} Comparison'

    plt.figure(figsize=(12, 8))
    for name, data in logs.items():
        df = data['test'] if metric in ['top1', 'top5'] else data['train']
        if not df.empty and metric in df.columns:
            plt.plot(df['epoch'], df[metric], marker='o', label=name, linewidth=1.5)
        else:
            print(f"Warning: {name} does not contain '{metric}' data.")

    plt.xlabel('Epoch')
    plt.ylabel(metric.title())
    plt.title(title)
    plt.legend(loc='best')
    plt.grid(True, linestyle='--', alpha=0.6)
    plt.tight_layout()
    plt.show()

def plot_train_loss_comparison(logs):
    """
    对比多个日志的训练 loss
    """
    plt.figure(figsize=(12, 8))
    for name, data in logs.items():
        df = data['train']
        if not df.empty and 'ce_avg' in df.columns:
            plt.plot(df['epoch'], df['ce_avg'], label=name, linewidth=1.2)
        else:
            print(f"Warning: {name} does not contain 'ce_avg' data.")

    plt.xlabel('Epoch')
    plt.ylabel('Training Loss (CE Avg)')
    plt.title('Training Loss Comparison')
    plt.legend(loc='best')
    plt.grid(True, linestyle='--', alpha=0.6)
    plt.tight_layout()
    plt.show()

def plot_lr_comparison(logs):
    """
    对比多个日志的学习率
    """
    plt.figure(figsize=(12, 8))
    for name, data in logs.items():
        df = data['train']
        if not df.empty and 'lr' in df.columns:
            plt.plot(df['epoch'], df['lr'], label=name, linewidth=1.2)
        else:
            print(f"Warning: {name} does not contain 'lr' data.")

    plt.xlabel('Epoch')
    plt.ylabel('Learning Rate')
    plt.title('Learning Rate Schedule Comparison')
    plt.legend(loc='best')
    plt.grid(True, linestyle='--', alpha=0.6)
    plt.tight_layout()
    plt.show()

if __name__ == '__main__':
    # --- 配置 ---
    LOG_DIR = './logs'  # 请将你的日志文件放入此目录

    # --- 解析 ---
    logs = parse_logs_in_dir(LOG_DIR)

    if not logs:
        print(f"No log files found in {LOG_DIR}. Please check the path.")
        exit()

    # --- 可视化 ---
    # 1. Top-1 准确率对比
    plot_comparison(logs, metric='top1', title='Top-1 Accuracy Comparison')

    # 2. Top-5 准确率对比
    plot_comparison(logs, metric='top5', title='Top-5 Accuracy Comparison')

    # 3. 训练 Loss 对比
    plot_train_loss_comparison(logs)

    # 4. 学习率对比
    plot_lr_comparison(logs)

    print("\nVisualization complete. Check the plots generated by matplotlib.")